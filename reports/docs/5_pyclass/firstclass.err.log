Traceback (most recent call last):
  File "C:\anaconda3\envs\abe_website\lib\site-packages\jupyter_cache\executors\utils.py", line 64, in single_nb_execution
    **kwargs,
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\anaconda3\envs\abe_website\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\client.py", line 664, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\anaconda3\envs\abe_website\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# create a class
class Room:
    length = 0.0
    breadth = 0.0

    # method to calculate area
    def calculate_area(self):
        print("Area of Room =", self.length * self.breadth)

# create object of Room class
study_room = Room()

# assign values to all the attributes
study_room.length = 42.5
study_room.breadth = 30.8

# access method inside class
study_room.calculate_area()


# Class definition
class ClassName:
    # Class attributes
    attribute1 = value1
    attribute2 = value2

    # Constructor
    def __init__(self, parameter1, parameter2):
        self.attribute1 = parameter1
        self.attribute2 = parameter2

    # Methods
    def method1(self, parameter1, parameter2):
        # Method code

    def method2(self, parameter1, parameter2):
        # Method code

# Creating an object
object_name = ClassName(argument1, argument2)

# Accessing object attributes
object_name.attribute1
object_name.attribute2

# Calling object methods
object_name.method1(argument1, argument2)
object_name.method2(argument1, argument2)

'''
Definitions:

* ClassName is the name of the class you're defining. Choose a descriptive name that follows Python naming conventions (typically using CamelCase).
* attribute1 and attribute2 are class attributes that hold data values. These attributes are shared by all instances of the class.
* The __init__ method is the constructor, which is called when a new object is created. It initializes the object's attributes with the provided values.
* method1 and method2 are methods (or functions) defined within the class. They represent the behaviors or actions that objects of the class can perform. The self parameter refers to the instance of the class and allows access to its attributes and methods.
* object_name is the name of the object (or instance) you create from the class.
* argument1 and argument2 are values passed to the constructor or methods when they are called.
* You can access object attributes using dot notation, like object_name.attribute1.
* You can call object methods using dot notation as well, like object_name.method1(argument1, argument2).

'''
------------------

[1;36m  File [1;32m"C:\Users\vsm71\AppData\Local\Temp\ipykernel_18660\3218395218.py"[1;36m, line [1;32m36[0m
[1;33m    def method2(self, parameter1, parameter2):[0m
[1;37m      ^[0m
[1;31mIndentationError[0m[1;31m:[0m expected an indented block

IndentationError: expected an indented block (3218395218.py, line 36)

